rtDeclareVariable(unsigned int,  pathtrace_ray_type, , );
rtDeclareVariable(unsigned int,  rr_begin_depth, , );

//----------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------- BRDFS -------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
__device__ optix::float3 reflection(optix::float3 _normal, float _eta){
    float3 ray_origin = ray.origin + t_hit * ray.direction;
    float3 ray_direction;
    /*
    if (optix::dot(-ray.direction, _normal) < 0.0 ){
        //printf("err");
        //current_prd.radiance = make_float3(1.0, 0.0, 0.0);
        //return make_float3(1.0, 0.0, 0.0);
        ray_direction = reflect(ray.direction, -_normal);
    }
    else if( optix::dot(-ray.direction, _normal) == 0.0){
        ray_direction = ray.direction;
    }
    else{
        ray_direction = reflect(ray.direction, _normal);
    }

    if (optix::length(ray.direction) == 0.0){
        printf("ERRROR start");
    }
    */

    ray_direction = reflect(ray.direction, _normal);
    //refract(ray_direction, ray.direction, _normal, _eta);
    float3 ffnormal = faceforward( _normal, -ray.direction, _normal );

    PerRayData_pathtrace prd;
    prd.result = make_float3(0.0);//current_prd.result;
    prd.radiance = make_float3(1.0);
    prd.attenuation = current_prd.attenuation;
    prd.countEmitted = current_prd.countEmitted;
   // prd.done = current_prd.done;
    prd.seed = current_prd.seed;
    prd.depth = current_prd.depth+1;

   // for(;;) {
        Ray reflection_ray = make_Ray( ray_origin, ray_direction, pathtrace_ray_type, scene_epsilon, RT_DEFAULT_MAX );
        if (reflection_ray.direction.x!=reflection_ray.direction.x) printf("ERRROR");
        rtTrace(top_object, reflection_ray, prd);

  //      if(prd.done) {
    //        prd.result += prd.radiance * prd.attenuation;
            //break;
      //  }
       // if(prd.depth >= rr_begin_depth){
          //  float pcont = fmaxf(prd.attenuation);
           // if(rnd(prd.seed) >= pcont) break;
           // prd.attenuation /= pcont;
     //   }
        prd.depth++;
       // prd.result += prd.radiance * prd.attenuation;
        //ray_origin = prd.origin;
        //ray_direction = prd.direction;
    //}
    current_prd.radiance = prd.radiance;
    return make_float3(1.0);//prd.attenuation;
}

