//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Fri Sep  5 05:40:32 2014 (1409892032)
// Cuda compilation tools, release 6.5, V6.5.19
//

.version 4.1
.target sm_50
.address_size 64

.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 1 .b8 vindex_buffer[1];
.global .align 1 .b8 nindex_buffer[1];
.global .align 1 .b8 tindex_buffer[1];
.global .align 1 .b8 material_buffer[1];
.global .align 8 .b8 texcoord[12];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texcoordE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texcoordE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8texcoordE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8texcoordE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 101, 120, 99, 111, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8texcoordE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .entry _Z14mesh_intersecti(
	.param .u32 _Z14mesh_intersecti_param_0
)
{
	.reg .pred 	%p<25>;
	.reg .s32 	%r<44>;
	.reg .f32 	%f<132>;
	.reg .s64 	%rd<92>;


	cvta.global.u64 	%rd5, vindex_buffer;
	ld.param.s32 	%rd6, [_Z14mesh_intersecti_param_0];
	mov.u32 	%r13, 1;
	mov.u32 	%r14, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r13, %r14, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	cvta.global.u64 	%rd23, vertex_buffer;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd23, %r13, %r14, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f17, [%rd10+8];
	ld.f32 	%f18, [%rd10+4];
	ld.f32 	%f19, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd23, %r13, %r14, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f20, [%rd16+8];
	ld.f32 	%f21, [%rd16+4];
	ld.f32 	%f22, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r13, %r14, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.ftz.f32 	%f23, %f22, %f19;
	sub.ftz.f32 	%f24, %f21, %f18;
	sub.ftz.f32 	%f25, %f20, %f17;
	ld.f32 	%f26, [%rd22+8];
	ld.f32 	%f27, [%rd22+4];
	ld.f32 	%f28, [%rd22];
	sub.ftz.f32 	%f29, %f19, %f28;
	sub.ftz.f32 	%f30, %f18, %f27;
	sub.ftz.f32 	%f31, %f17, %f26;
	mul.ftz.f32 	%f32, %f30, %f25;
	mul.ftz.f32 	%f33, %f31, %f24;
	sub.ftz.f32 	%f1, %f32, %f33;
	mul.ftz.f32 	%f34, %f31, %f23;
	mul.ftz.f32 	%f35, %f29, %f25;
	sub.ftz.f32 	%f2, %f34, %f35;
	mul.ftz.f32 	%f36, %f29, %f24;
	mul.ftz.f32 	%f37, %f30, %f23;
	sub.ftz.f32 	%f3, %f36, %f37;
	ld.global.f32 	%f38, [ray+12];
	ld.global.f32 	%f39, [ray+16];
	mul.ftz.f32 	%f40, %f2, %f39;
	fma.rn.ftz.f32 	%f41, %f1, %f38, %f40;
	ld.global.f32 	%f42, [ray+20];
	fma.rn.ftz.f32 	%f43, %f3, %f42, %f41;
	rcp.approx.ftz.f32 	%f44, %f43;
	ld.global.f32 	%f45, [ray];
	sub.ftz.f32 	%f46, %f19, %f45;
	ld.global.f32 	%f47, [ray+4];
	sub.ftz.f32 	%f48, %f18, %f47;
	ld.global.f32 	%f49, [ray+8];
	sub.ftz.f32 	%f50, %f17, %f49;
	mul.ftz.f32 	%f51, %f46, %f44;
	mul.ftz.f32 	%f52, %f48, %f44;
	mul.ftz.f32 	%f53, %f50, %f44;
	mul.ftz.f32 	%f54, %f39, %f53;
	mul.ftz.f32 	%f55, %f42, %f52;
	sub.ftz.f32 	%f56, %f54, %f55;
	mul.ftz.f32 	%f57, %f42, %f51;
	mul.ftz.f32 	%f58, %f38, %f53;
	sub.ftz.f32 	%f59, %f57, %f58;
	mul.ftz.f32 	%f60, %f38, %f52;
	mul.ftz.f32 	%f61, %f39, %f51;
	sub.ftz.f32 	%f62, %f60, %f61;
	mul.ftz.f32 	%f63, %f59, %f30;
	fma.rn.ftz.f32 	%f64, %f56, %f29, %f63;
	fma.rn.ftz.f32 	%f4, %f62, %f31, %f64;
	mul.ftz.f32 	%f65, %f59, %f24;
	fma.rn.ftz.f32 	%f66, %f56, %f23, %f65;
	fma.rn.ftz.f32 	%f5, %f62, %f25, %f66;
	mul.ftz.f32 	%f67, %f2, %f52;
	fma.rn.ftz.f32 	%f68, %f1, %f51, %f67;
	fma.rn.ftz.f32 	%f6, %f3, %f53, %f68;
	ld.global.f32 	%f69, [ray+32];
	setp.lt.ftz.f32	%p1, %f6, %f69;
	ld.global.f32 	%f70, [ray+28];
	setp.gt.ftz.f32	%p2, %f6, %f70;
	and.pred  	%p3, %p1, %p2;
	setp.ge.ftz.f32	%p4, %f4, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.ftz.f32	%p6, %f5, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.ftz.f32 	%f71, %f4, %f5;
	setp.le.ftz.f32	%p8, %f71, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB5_9;
	bra.uni 	BB5_1;

BB5_1:
	// inline asm
	call (%r15), _rt_potential_intersection, (%f6);
	// inline asm
	setp.eq.s32	%p10, %r15, 0;
	@%p10 bra 	BB5_9;

	cvta.global.u64 	%rd29, nindex_buffer;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r13, %r14, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.u32 	%r3, [%rd28+8];
	ld.u32 	%r2, [%rd28+4];
	ld.u32 	%r1, [%rd28];
	cvta.global.u64 	%rd38, normal_buffer;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r13, %r14);
	// inline asm
	cvt.u32.u64	%r20, %rd34;
	setp.eq.s32	%p11, %r20, 0;
	setp.lt.s32	%p12, %r1, 0;
	or.pred  	%p13, %p11, %p12;
	setp.lt.s32	%p14, %r2, 0;
	or.pred  	%p15, %p13, %p14;
	setp.lt.s32	%p16, %r3, 0;
	or.pred  	%p17, %p15, %p16;
	mul.ftz.f32 	%f73, %f2, %f2;
	fma.rn.ftz.f32 	%f74, %f1, %f1, %f73;
	fma.rn.ftz.f32 	%f75, %f3, %f3, %f74;
	sqrt.approx.ftz.f32 	%f7, %f75;
	@%p17 bra 	BB5_4;

	cvt.s64.s32	%rd41, %r1;
	// inline asm
	call (%rd39), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd41, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f76, [%rd39+8];
	ld.f32 	%f77, [%rd39+4];
	ld.f32 	%f78, [%rd39];
	cvt.s64.s32	%rd47, %r2;
	// inline asm
	call (%rd45), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd47, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f79, [%rd45+8];
	ld.f32 	%f80, [%rd45+4];
	ld.f32 	%f81, [%rd45];
	cvt.s64.s32	%rd53, %r3;
	// inline asm
	call (%rd51), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd53, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f82, [%rd51+8];
	ld.f32 	%f83, [%rd51+4];
	ld.f32 	%f84, [%rd51];
	mul.ftz.f32 	%f85, %f84, %f5;
	mul.ftz.f32 	%f86, %f83, %f5;
	mul.ftz.f32 	%f87, %f82, %f5;
	fma.rn.ftz.f32 	%f88, %f81, %f4, %f85;
	fma.rn.ftz.f32 	%f89, %f80, %f4, %f86;
	fma.rn.ftz.f32 	%f90, %f79, %f4, %f87;
	mov.f32 	%f91, 0f3F800000;
	sub.ftz.f32 	%f92, %f91, %f4;
	sub.ftz.f32 	%f93, %f92, %f5;
	fma.rn.ftz.f32 	%f94, %f78, %f93, %f88;
	fma.rn.ftz.f32 	%f95, %f77, %f93, %f89;
	fma.rn.ftz.f32 	%f96, %f76, %f93, %f90;
	mul.ftz.f32 	%f97, %f95, %f95;
	fma.rn.ftz.f32 	%f98, %f94, %f94, %f97;
	fma.rn.ftz.f32 	%f99, %f96, %f96, %f98;
	sqrt.approx.ftz.f32 	%f100, %f99;
	rcp.approx.ftz.f32 	%f101, %f100;
	mul.ftz.f32 	%f129, %f94, %f101;
	mul.ftz.f32 	%f130, %f95, %f101;
	mul.ftz.f32 	%f131, %f96, %f101;
	bra.uni 	BB5_5;

BB5_4:
	rcp.approx.ftz.f32 	%f102, %f7;
	mul.ftz.f32 	%f129, %f1, %f102;
	mul.ftz.f32 	%f130, %f2, %f102;
	mul.ftz.f32 	%f131, %f3, %f102;

BB5_5:
	st.global.v2.f32 	[shading_normal], {%f129, %f130};
	st.global.f32 	[shading_normal+8], %f131;
	rcp.approx.ftz.f32 	%f103, %f7;
	mul.ftz.f32 	%f104, %f3, %f103;
	mul.ftz.f32 	%f105, %f2, %f103;
	mul.ftz.f32 	%f106, %f1, %f103;
	st.global.v2.f32 	[geometric_normal], {%f106, %f105};
	st.global.f32 	[geometric_normal+8], %f104;
	cvta.global.u64 	%rd58, tindex_buffer;
	// inline asm
	call (%rd57), _rt_buffer_get_64, (%rd58, %r13, %r14, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.u32 	%r6, [%rd57+8];
	ld.u32 	%r5, [%rd57+4];
	ld.u32 	%r4, [%rd57];
	cvta.global.u64 	%rd67, texcoord_buffer;
	mov.u32 	%r30, 8;
	// inline asm
	call (%rd63, %rd64, %rd65, %rd66), _rt_buffer_get_size_64, (%rd67, %r13, %r30);
	// inline asm
	cvt.u32.u64	%r31, %rd63;
	setp.eq.s32	%p18, %r31, 0;
	setp.lt.s32	%p19, %r4, 0;
	or.pred  	%p20, %p18, %p19;
	setp.lt.s32	%p21, %r5, 0;
	or.pred  	%p22, %p20, %p21;
	setp.lt.s32	%p23, %r6, 0;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	BB5_7;

	cvt.s64.s32	%rd70, %r4;
	// inline asm
	call (%rd68), _rt_buffer_get_64, (%rd67, %r13, %r30, %rd70, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f107, %f108}, [%rd68];
	cvt.s64.s32	%rd76, %r5;
	// inline asm
	call (%rd74), _rt_buffer_get_64, (%rd67, %r13, %r30, %rd76, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f109, %f110}, [%rd74];
	cvt.s64.s32	%rd82, %r6;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd67, %r13, %r30, %rd82, %rd27, %rd27, %rd27);
	// inline asm
	ld.v2.f32 	{%f111, %f112}, [%rd80];
	mul.ftz.f32 	%f114, %f111, %f5;
	mul.ftz.f32 	%f116, %f112, %f5;
	fma.rn.ftz.f32 	%f118, %f109, %f4, %f114;
	fma.rn.ftz.f32 	%f120, %f110, %f4, %f116;
	mov.f32 	%f121, 0f3F800000;
	sub.ftz.f32 	%f122, %f121, %f4;
	sub.ftz.f32 	%f123, %f122, %f5;
	fma.rn.ftz.f32 	%f125, %f108, %f123, %f120;
	fma.rn.ftz.f32 	%f127, %f107, %f123, %f118;
	st.global.v2.f32 	[texcoord], {%f127, %f125};
	mov.u32 	%r38, 0;
	st.global.u32 	[texcoord+8], %r38;
	bra.uni 	BB5_8;

BB5_7:
	mov.u32 	%r39, 0;
	st.global.u32 	[texcoord+8], %r39;
	mov.f32 	%f128, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f128, %f128};

BB5_8:
	cvta.global.u64 	%rd87, material_buffer;
	mov.u32 	%r41, 4;
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd87, %r13, %r41, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.u32 	%r43, [%rd86];
	// inline asm
	call (%r42), _rt_report_intersection, (%r43);
	// inline asm

BB5_9:
	ret;
}

.visible .entry _Z11mesh_boundsiPf(
	.param .u32 _Z11mesh_boundsiPf_param_0,
	.param .u64 _Z11mesh_boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .s32 	%r<11>;
	.reg .f32 	%f<42>;
	.reg .s64 	%rd<27>;


	ld.param.u64 	%rd2, [_Z11mesh_boundsiPf_param_1];
	ld.param.s32 	%rd5, [_Z11mesh_boundsiPf_param_0];
	cvta.global.u64 	%rd4, vindex_buffer;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r7, %r8, %rd5, %rd26, %rd26, %rd26);
	// inline asm
	ld.s32 	%rd11, [%rd3];
	cvta.global.u64 	%rd22, vertex_buffer;
	ld.s32 	%rd17, [%rd3+4];
	ld.s32 	%rd23, [%rd3+8];
	// inline asm
	call (%rd9), _rt_buffer_get_64, (%rd22, %r7, %r8, %rd11, %rd26, %rd26, %rd26);
	// inline asm
	ld.f32 	%f3, [%rd9+8];
	ld.f32 	%f2, [%rd9+4];
	ld.f32 	%f1, [%rd9];
	// inline asm
	call (%rd15), _rt_buffer_get_64, (%rd22, %r7, %r8, %rd17, %rd26, %rd26, %rd26);
	// inline asm
	ld.f32 	%f6, [%rd15+8];
	ld.f32 	%f5, [%rd15+4];
	ld.f32 	%f4, [%rd15];
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r7, %r8, %rd23, %rd26, %rd26, %rd26);
	// inline asm
	sub.ftz.f32 	%f11, %f4, %f1;
	sub.ftz.f32 	%f12, %f5, %f2;
	sub.ftz.f32 	%f13, %f6, %f3;
	ld.f32 	%f9, [%rd21+8];
	ld.f32 	%f8, [%rd21+4];
	ld.f32 	%f7, [%rd21];
	sub.ftz.f32 	%f14, %f7, %f1;
	sub.ftz.f32 	%f15, %f8, %f2;
	sub.ftz.f32 	%f16, %f9, %f3;
	mul.ftz.f32 	%f17, %f12, %f16;
	mul.ftz.f32 	%f18, %f13, %f15;
	sub.ftz.f32 	%f19, %f17, %f18;
	mul.ftz.f32 	%f20, %f13, %f14;
	mul.ftz.f32 	%f21, %f11, %f16;
	sub.ftz.f32 	%f22, %f20, %f21;
	mul.ftz.f32 	%f23, %f11, %f15;
	mul.ftz.f32 	%f24, %f12, %f14;
	sub.ftz.f32 	%f25, %f23, %f24;
	mul.ftz.f32 	%f26, %f22, %f22;
	fma.rn.ftz.f32 	%f27, %f19, %f19, %f26;
	fma.rn.ftz.f32 	%f28, %f25, %f25, %f27;
	sqrt.approx.ftz.f32 	%f10, %f28;
	setp.gt.ftz.f32	%p3, %f10, 0f00000000;
	@%p3 bra 	BB6_2;

	mov.pred 	%p5, 0;
	bra.uni 	BB6_3;

BB6_2:
	abs.ftz.f32 	%f29, %f10;
	setp.neu.ftz.f32	%p5, %f29, 0f7F800000;

BB6_3:
	cvta.to.global.u64 	%rd1, %rd2;
	@%p5 bra 	BB6_5;

	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd1], %r9;
	st.global.u32 	[%rd1+8], %r9;
	st.global.u32 	[%rd1+4], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd1+12], %r10;
	st.global.u32 	[%rd1+16], %r10;
	st.global.u32 	[%rd1+20], %r10;
	bra.uni 	BB6_6;

BB6_5:
	min.ftz.f32 	%f30, %f1, %f4;
	min.ftz.f32 	%f31, %f30, %f7;
	min.ftz.f32 	%f32, %f2, %f5;
	min.ftz.f32 	%f33, %f32, %f8;
	min.ftz.f32 	%f34, %f3, %f6;
	min.ftz.f32 	%f35, %f34, %f9;
	st.global.f32 	[%rd1], %f31;
	st.global.f32 	[%rd1+8], %f35;
	st.global.f32 	[%rd1+4], %f33;
	max.ftz.f32 	%f36, %f1, %f4;
	max.ftz.f32 	%f37, %f36, %f7;
	max.ftz.f32 	%f38, %f2, %f5;
	max.ftz.f32 	%f39, %f38, %f8;
	max.ftz.f32 	%f40, %f3, %f6;
	max.ftz.f32 	%f41, %f40, %f9;
	st.global.f32 	[%rd1+12], %f37;
	st.global.f32 	[%rd1+16], %f39;
	st.global.f32 	[%rd1+20], %f41;

BB6_6:
	ret;
}

.visible .func _ZN5optix3RayC1Ev(
	.param .b64 _ZN5optix3RayC1Ev_param_0
)
{



	ret;
}

.visible .func _ZN5optix3RayC2Ev(
	.param .b64 _ZN5optix3RayC2Ev_param_0
)
{



	ret;
}


