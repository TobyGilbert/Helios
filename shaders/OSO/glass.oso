OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
surface glass	%meta{string,help,"Simple dielectric material"} 
param	float	Ks	0.15000001		%meta{string,help,"Color scaling of the refraction"} %meta{float,min,0} %meta{float,max,1}  %read{21,21} %write{2147483647,-1}
param	float	Cs	0.80000001		%meta{string,help,"Base color"} %meta{float,min,0} %meta{float,max,1}  %read{17,19} %write{2147483647,-1}
param	color	col	1 1 1		%read{23,23} %write{2147483647,-1}
param	float	eta	1.5		%meta{string,help,"Index of refraction"} %meta{float,min,1} %meta{float,max,3}  %read{15,20} %write{2147483647,-1}
param	int	caustics	0		%meta{string,help,"Enable indirect lighting through glass"} %meta{string,widget,"checkBox"}  %read{0,0} %write{2147483647,-1}
param	int	TIR	0		%meta{string,help,"Enable Total Internal Reflection"} %meta{string,widget,"checkBox"}  %read{2147483647,-1} %write{2147483647,-1}
global	normal	N	%read{16,20} %write{2147483647,-1}
global	closure color	Ci	%read{2147483647,-1} %write{17,23}
temp	int	$tmp1	%read{1,12} %write{0,11}
const	int	$const1	0		%read{0,10} %write{2147483647,-1}
temp	int	$tmp2	%read{3,3} %write{2,2}
const	string	$const2	"glossy"		%read{2,2} %write{2147483647,-1}
temp	int	$tmp3	%read{4,4} %write{3,3}
temp	int	$tmp4	%read{5,10} %write{4,9}
temp	int	$tmp5	%read{7,7} %write{6,6}
const	string	$const3	"diffuse"		%read{6,6} %write{2147483647,-1}
temp	int	$tmp6	%read{8,8} %write{7,7}
temp	int	$tmp7	%read{9,9} %write{8,8}
temp	int	$tmp8	%read{11,11} %write{10,10}
temp	int	$tmp9	%read{14,14} %write{13,13}
temp	closure color	$tmp10	%read{17,17} %write{16,16}
const	float	$const4	1		%read{15,15} %write{2147483647,-1}
temp	float	$tmp11	%read{16,16} %write{15,15}
const	string	$const5	"refraction"		%read{16,18} %write{2147483647,-1}
temp	closure color	$tmp12	%read{19,19} %write{18,18}
temp	closure color	$tmp13	%read{22,22} %write{19,19}
temp	closure color	$tmp14	%read{21,21} %write{20,20}
const	string	$const6	"reflection"		%read{20,20} %write{2147483647,-1}
temp	closure color	$tmp15	%read{22,22} %write{21,21}
temp	closure color	$tmp16	%read{23,23} %write{22,22}
code ___main___
# <buffer>:52
# <not found>
	neq		$tmp1 caustics $const1 	%filename{"<buffer>"} %line{52} %argrw{"wrr"}
	if		$tmp1 2 12 	%argrw{"r"}
	raytype		$tmp2 $const2 	%argrw{"wr"}
	eq		$tmp3 $tmp2 $const1 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
	if		$tmp4 10 10 	%argrw{"r"}
	raytype		$tmp5 $const3 	%argrw{"wr"}
	eq		$tmp6 $tmp5 $const1 	%argrw{"wrr"}
	neq		$tmp7 $tmp6 $const1 	%argrw{"wrr"}
	assign		$tmp4 $tmp7 	%argrw{"wr"}
	neq		$tmp8 $tmp4 $const1 	%argrw{"wrr"}
	assign		$tmp1 $tmp8 	%argrw{"wr"}
	if		$tmp1 24 24 	%argrw{"r"}
# <buffer>:54
# <not found>
	backfacing	$tmp9 	%line{54} %argrw{"w"}
	if		$tmp9 18 24 	%argrw{"r"}
# <buffer>:55
# <not found>
	div		$tmp11 $const4 eta 	%line{55} %argrw{"wrr"}
	closure		$tmp10 $const5 N $tmp11 	%argrw{"wrrr"}
	mul		Ci $tmp10 Cs 	%argrw{"wrr"}
# <buffer>:64
# <not found>
	closure		$tmp12 $const5 N eta 	%line{64} %argrw{"wrrr"}
	mul		$tmp13 $tmp12 Cs 	%argrw{"wrr"}
	closure		$tmp14 $const6 N eta 	%argrw{"wrrr"}
	mul		$tmp15 $tmp14 Ks 	%argrw{"wrr"}
	add		$tmp16 $tmp13 $tmp15 	%argrw{"wrr"}
	mul		Ci $tmp16 col 	%argrw{"wrr"}
	end
