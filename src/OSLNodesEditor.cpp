#include "OSLNodesEditor.h"
#include <iostream>
#include <QFile>
#include <QDir>
#include <QFileInfo>
#include <QTextStream>
#include <QDate>

//------------------------------------------------------------------------------------------------------------------------------------
OSLNodesEditor::OSLNodesEditor(QObject *parent) :
    QNodesEditor(parent)
{
    //set our material destination
    m_optixMatDest = "OptixMaterials/tempMat.cu";

}
//------------------------------------------------------------------------------------------------------------------------------------
void OSLNodesEditor::createOptixMaterial()
{
    QFileInfo fileInfo(m_optixMatDest.c_str());
    if(!QDir(fileInfo.absoluteDir()).exists()){
        QDir().mkdir(fileInfo.absolutePath());
    }
    QFile myfile(m_optixMatDest.c_str());

    if(myfile.open(QIODevice::WriteOnly)){

        QTextStream stream(&myfile);
        QDate date;
        stream<<"//This file has been automatically generated by Declan Russell's xX_OSL Node Editor Hyper_Xx #NoScopez on the "<<date.currentDate().toString("dd.MM.yyyy")<<endl;

        //add our includes and namespaces
        stream<<"#include <optix.h>"<<endl;
        stream<<"#include <optixu/optixu_math_namespace.h>"<<endl;
        stream<<"#include \"helpers.h\""<<endl;
        stream<<"using namespace optix;"<<endl;
        stream<<"\n\n";
        //declare our structures
        /// @todo Might be worth having these in a header file as they are common structs to have
        stream<<"struct ShaderGlobals{"<<endl;
        stream<<"   float3 P;"<<endl;
        stream<<"   float3 I;"<<endl;
        stream<<"   float3 N;"<<endl;
        stream<<"   float3 Ng;"<<endl;
        stream<<"   float u, v;"<<endl;
        stream<<"};"<<endl;
        stream<<endl;
        stream<<"struct PerRayData_pathtrace{"<<endl;
        stream<<"   float3 result;"<<endl;
        stream<<"   float3 radiance;"<<endl;
        stream<<"   float3 attenuation;"<<endl;
        stream<<"   float3 origin;"<<endl;
        stream<<"   float3 direction;"<<endl;
        stream<<"   float importance;"<<endl;
        stream<<"   unsigned int seed;"<<endl;
        stream<<"   int depth;"<<endl;
        stream<<"   int countEmitted;"<<endl;
        stream<<"   int done;"<<endl;
        stream<<"   int inside;"<<endl;
        stream<<"   rayType type;"<<endl;
        stream<<"};"<<endl;

        //Declare our variables
        stream<<"// Camera Variables"<<endl;
        stream<<"rtDeclareVariable(float3,        eye, , );"<<endl;
        stream<<"// Geometry Variables "<<endl;
        stream<<"rtDeclareVariable(float3, geometric_normal, attribute geometric_normal, ); "<<endl;
        stream<<"rtDeclareVariable(float3, shading_normal,   attribute shading_normal, );"<<endl;
        stream<<"rtDeclareVariable(float3, texcoord, attribute texcoord, );"<<endl;
        stream<<"// Our current ray and payload variables"<<endl;
        stream<<"rtDeclareVariable(optix::Ray, ray,          rtCurrentRay, );"<<endl;
        stream<<"rtDeclareVariable(PerRayData_pathtrace, current_prd, rtPayload, );"<<endl;
        stream<<"\n\n"<<endl;


        //add our main material program funcion
        stream<<"//-------Main Material Program-----------"<<endl;
        stream<<"RT_PROGRAM void "<<m_materialName.c_str()<<"(){"<<endl;





        //end of our material program
        stream<<"}"<<endl;

    }
    else{
        std::cerr<<"Cannot create material file"<<std::endl;
    }

}
//------------------------------------------------------------------------------------------------------------------------------------
