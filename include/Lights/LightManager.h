#ifndef LIGHTMANAGER_H_
#define LIGHTMANAGER_H_
//----------------------------------------------------------------------------------------------------------------------
/// @brief A class to manage all the lights in our scene
/// @author Toby Gilbert
/// @date 30/05/15
//----------------------------------------------------------------------------------------------------------------------
#include <QDockWidget>
#include <QWidget>
#include <vector>
#include <optixu/optixpp_namespace.h>
#include <optixu/optixu_math_namespace.h>

//----------------------------------------------------------------------------------------------------------------------
// QT GUI includes
//----------------------------------------------------------------------------------------------------------------------
#include <QGridLayout>
#include <QGroupBox>
#include <QLabel>
#include <QSpacerItem>
#include <QDoubleSpinBox>
#include <QPushButton>


class LightManager : public QDockWidget{
    Q_OBJECT
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A structure to hold information about our parallelogram area lights
    //----------------------------------------------------------------------------------------------------------------------
    struct ParallelogramLight{
        optix::float3 corner;
        optix::float3 v1, v2;
        optix::float3 normal;
        optix::float3 emission;
        bool textured;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns an instance of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static LightManager *getInstance(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~LightManager();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Initialise the light buffer
    //----------------------------------------------------------------------------------------------------------------------
    void initialise();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create a new parallelogram light
    //----------------------------------------------------------------------------------------------------------------------
    void createParollelogramLight(optix::float3 _corner, optix::float3 _v1, optix::float3 _v2, optix::float3 _emission);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns our optix buffer containing information about our lights
    //----------------------------------------------------------------------------------------------------------------------
    inline optix::Buffer getLightsBuffer(){return m_lightBuffer;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the geometry for our lights
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<optix::GeometryInstance> getLightsGeometry(){return m_lightGeometry;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    //----------------------------------------------------------------------------------------------------------------------
    explicit LightManager(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to our instance of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static LightManager* m_instance;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Creates our GUI elements
    //----------------------------------------------------------------------------------------------------------------------
    void createGUI();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A buffer to hold our lights
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_lightBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A variable to store the number of lights in our buffer
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_numLights;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A vector containing the geometry for our lights
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<optix::GeometryInstance> m_lightGeometry;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create the geometry for our lights
    //----------------------------------------------------------------------------------------------------------------------
    optix::GeometryInstance createParallelogram(const optix::float3 &anchor, const optix::float3 &offset1, const optix::float3 &offset2);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A material to add to our lights
    //----------------------------------------------------------------------------------------------------------------------
    optix::Material m_lightMaterial;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief AABB bounding box program for our lights geometry
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_bounding_box;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our full intersection program for our lights geometry
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_intersection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A vector to hold all our GUI widgets
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<QObject*> m_guiWidgets;
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_cornerX;
    QDoubleSpinBox* m_cornerY;
    QDoubleSpinBox* m_cornerZ;
    QDoubleSpinBox* m_v1X;
    QDoubleSpinBox* m_v1Y;
    QDoubleSpinBox* m_v1Z;
    QDoubleSpinBox* m_v2X;
    QDoubleSpinBox* m_v2Y;
    QDoubleSpinBox* m_v2Z;
    QDoubleSpinBox* m_emissionX;
    QDoubleSpinBox* m_emissionY;
    QDoubleSpinBox* m_emissionZ;

public slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Adds a light to the scene
    //----------------------------------------------------------------------------------------------------------------------
    void addLight();
    //----------------------------------------------------------------------------------------------------------------------
};

#endif
