#ifndef LIGHT_H
#define LIGHT_H

#include <optixu/optixpp_namespace.h>
#include <optixu/optixu_math_namespace.h>

#include <glm/glm.hpp>

class Light{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A structure to hold information about our parallelogram area lights
    //----------------------------------------------------------------------------------------------------------------------
    struct ParallelogramLight{
        optix::float3 corner;
        optix::float3 v1, v2;
        optix::float3 normal;
        optix::float3 emission;
        bool textured;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    //----------------------------------------------------------------------------------------------------------------------
    Light();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Light();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create a parallelogram shaped light
    //----------------------------------------------------------------------------------------------------------------------
    void createParollelogramLight();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the gemoetry instance for the light
    //----------------------------------------------------------------------------------------------------------------------
    inline optix::GeometryInstance getGeometryInstance(){return m_geometryInstance;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the Parallelogram data structure for holding the light information
    //----------------------------------------------------------------------------------------------------------------------
    inline ParallelogramLight getParallelogromLight(){return m_parallelogramLight;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the material attached to the light
    //----------------------------------------------------------------------------------------------------------------------
    inline optix::Material getMaterial(){return m_lightMaterial;}
    //----------------------------------------------------------------------------------------------------------------------
    void setTrans(glm::mat4 _trans, bool _transpose = 0);
    inline optix::Transform getGeomAndTrans(){return m_trans;}
    inline optix::Acceleration getAcceleration(){return m_acceleration;}
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Create the parallelogram geometry used by the light
    //----------------------------------------------------------------------------------------------------------------------
//    optix::GeometryInstance createParallelogram(const optix::float3 &anchor, const optix::float3 &offset1, const optix::float3 &offset2);
    optix::GeometryInstance createParallelogram(const optix::float3 &_point1, const optix::float3 &_point2, const optix::float3 &_point3);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The geometry instance
    //----------------------------------------------------------------------------------------------------------------------
    optix::GeometryInstance m_geometryInstance;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The data structure for holding information about the light
    //----------------------------------------------------------------------------------------------------------------------
    ParallelogramLight m_parallelogramLight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The optix material attached to the light
    //----------------------------------------------------------------------------------------------------------------------
    optix::Material m_lightMaterial;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The intersection program used for the light geometry
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_intersection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief An AABB intersection program for the light geometry
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_bounding_box;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A translation
    //----------------------------------------------------------------------------------------------------------------------
    optix::Transform m_trans;
    //----------------------------------------------------------------------------------------------------------------------
    optix::GeometryGroup m_geometryGroup;
    optix::Acceleration m_acceleration;
    float m_points[4];

};

#endif
