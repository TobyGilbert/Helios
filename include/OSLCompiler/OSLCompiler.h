#ifndef OSLCOMPILER_H_
#define OSLCOMPILER_H_

#include <QString>
#include <string>
#include <vector>
extern int yyparse ();

enum Type{
    TypeInt,TypeFloat,TypeString, TypeColour, TypeMatrix, TypeNormal, TypePoint, TypeVoid, TypeVector
};
class OSLCompiler{
public:
    struct Symbol{
        Type m_type;
        std::string m_name;
        std::vector<std::string> m_initialParams;
    };
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    static OSLCompiler* getOSLCompiler();
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    ~OSLCompiler();
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    std::string writeDeviceFunction();
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    bool parseFile(const std::string &_filename);
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    inline void shaderName(std::string _name){m_name = _name;}
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    std::string getName(){return m_name;}
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    void inputParams(Type _t, std::string _name);
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<Symbol>& getInputParams(){return m_inputParams;}
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    void expression(std::string _expression);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    OSLCompiler();
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    OSLCompiler(OSLCompiler const&){}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief remove access to our assignment operator as we dont want copies of our signton class
    //----------------------------------------------------------------------------------------------------------------------
    OSLCompiler& operator=(OSLCompiler const&){}
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    static OSLCompiler* m_OSLCompiler;
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_name;
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Symbol> m_inputParams;
    //----------------------------------------------------------------------------------------------------------------------
    std::string getType(int _type);
    std::string m_expression;
};


#endif
