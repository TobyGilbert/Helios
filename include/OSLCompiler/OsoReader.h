/// @brief Class to interpret the oso code and turn it into a device function
/// @author Toby Gilbert
/// @date 04/03/15
#ifndef OSOREADER_H_
#define OSOREADER_H_
#include <string>
#include <vector>
#include <map>
#include <FlexLexer.h>
#include <QString>
//class osoFlexLexer;
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief Symbols types for OSO files
//----------------------------------------------------------------------------------------------------------------------------------------
enum SymType {
    SymTypeParam, SymTypeOutputParam,
    SymTypeLocal, SymTypeTemp, SymTypeGlobal, SymTypeConst,
    SymTypeFunction, SymTypeType
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief Types used in OSL
//----------------------------------------------------------------------------------------------------------------------------------------
enum Type{
    TypeInt = 0,
    TypeFloat,
    TypeString,
    TypeColour,
    TypeMatrix,
    TypeNormal,
    TypePoint,
    TypeVoid,
    TypeVector,
    TypeError
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief An instruction within the OSO code section
//----------------------------------------------------------------------------------------------------------------------------------------
struct Instruction{
    std::string m_opcode = std::string("void");
    std::string m_output = std::string("void");
    std::vector<std::string> m_args;
    int m_lineNo;
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief A struction to represent any symbol used in a particular shader
//----------------------------------------------------------------------------------------------------------------------------------------
struct Symbol{
    int m_symType;
    Type m_type;
    std::string m_name;
    std::vector<std::string> m_initialParams;
    int m_lineNo;
    bool m_array = false;
    std::string m_arrayLength;
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief A structure to hold jump targets for use will if/else statements
//----------------------------------------------------------------------------------------------------------------------------------------
struct JumpTarget{
    int m_location; // Where to put the jump target this will be the line after the if statement
    int m_jump; // Where to jump to this will be the line after the else statement
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief A structure to hold jump targets for use will for loops
//----------------------------------------------------------------------------------------------------------------------------------------
struct ForLoop{
    int m_endCondition;
    int m_endLoop;
};
//----------------------------------------------------------------------------------------------------------------------------------------
extern int yyparse ();
//----------------------------------------------------------------------------------------------------------------------------------------
class OsoReader{
public:
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    //----------------------------------------------------------------------------------------------------------------------------------------
    OsoReader();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------------------------
    ~OsoReader();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Set the oso version
    //----------------------------------------------------------------------------------------------------------------------------------------
    void version(float _major, int _minor);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Create the shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    void shader(std::string _shaderType, std::string _shaderName);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Save the parameters passed to the shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    void parameter(std::pair<std::string,std::string> _params);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Add a symbols a vector storing all symbols used
    //----------------------------------------------------------------------------------------------------------------------------------------
    void addSymbols(int _symtype, Type _type, std::string _identifier);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Makes the symbol of type array
    //----------------------------------------------------------------------------------------------------------------------------------------
    void makeSymbolArrayType(std::string _arrayLength);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Add the default parameters for a symbol
    //----------------------------------------------------------------------------------------------------------------------------------------
    void addSymbolDefaults(std::string _default);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief An instruction within the shader code
    //----------------------------------------------------------------------------------------------------------------------------------------
    void instruction(std::string _opcode, int _lineNo);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief argument for the instructions
    //----------------------------------------------------------------------------------------------------------------------------------------
    void instructionArguments(std::string _argument);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Parse the oso file
    //----------------------------------------------------------------------------------------------------------------------------------------
    bool parseFile(const std::string &_filename);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Parse the oso buffer
    //----------------------------------------------------------------------------------------------------------------------------------------
    bool parseBuffer(const std::string &_buffer, QString _filename);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Print the osl shader version
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline void printVersion(){std::cout<<"Open Shading Language Version: "<<m_osoMajor<<"."<<m_osoMinor<<std::endl;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to shader name
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline std::string getShaderName(){return m_shaderName;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to shader type
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline std::string getShaderType(){return m_shaderType;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Print the osl shader currently being parsed;
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline void printShader(){std::cout<<"Shader: "<<m_shaderType<<" "<<m_shaderName<<std::endl;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Print the parameters input into the OSL shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    void printParams();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Print the instructions and its arguments
    //----------------------------------------------------------------------------------------------------------------------------------------
    void printInstructions();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Print the cuda device function
    //----------------------------------------------------------------------------------------------------------------------------------------
    void printDeviceFunction();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Generate a cuda device function
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::string generateDeviceFunction();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the input parameters for the current OSL shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<Symbol> getInputParams();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the outpu parameters for the current OSL shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<Symbol> getOutputParams();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Reset all vectors
    //----------------------------------------------------------------------------------------------------------------------------------------
    void resetVectors();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A vector containing all the symbols used in an OSL shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<Symbol> m_symbols;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the current line number being read by the compiler
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline int getLineNo(){return m_lineNo;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Incriments the line number variable
    //----------------------------------------------------------------------------------------------------------------------------------------
    inline void incrimentLineNo(){m_lineNo++;}
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Evaluates lines in an oso function and outputs a string
    //----------------------------------------------------------------------------------------------------------------------------------------
    void evaluateLine();
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Check if the vaiable is a shader global
    //----------------------------------------------------------------------------------------------------------------------------------------
    bool checkShaderGlobals(std::string _variable);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Return the type of symbol _variable
    //----------------------------------------------------------------------------------------------------------------------------------------
    Type getSymbolType(std::string _variable);
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the iterator to the symbol in the symbols array
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<Symbol>::iterator getSymbol(std::string _symbolName);
    //----------------------------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Oso major version
    //----------------------------------------------------------------------------------------------------------------------------------------
    float m_osoMajor;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Oso minor version
    //----------------------------------------------------------------------------------------------------------------------------------------
    int m_osoMinor;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The type of shader
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::string m_shaderType;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The shader name
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::string m_shaderName;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The shaders input parameters
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<std::pair<std::string, std::string>> m_iParams;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The shaders instructions
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<Instruction> m_instructions;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The functions the shader is using
    //----------------------------------------------------------------------------------------------------------------------------------------
//    std::map<std::string, std::string> m_instructionFunctions;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief The current line number being read
    //----------------------------------------------------------------------------------------------------------------------------------------
    int m_lineNo;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A vector to store every inturpretted line
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_lines;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief A vector to store jump targets for use with if statements
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<JumpTarget> m_jumpTargets;
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<ForLoop> m_forLoopJumpTargets;
    /// @brief Dictates whether the next symbol is an array
    //----------------------------------------------------------------------------------------------------------------------------------------
    bool m_array;
    //----------------------------------------------------------------------------------------------------------------------------------------
    /// @brief If the next symbol to be added is an array this is the length
    //----------------------------------------------------------------------------------------------------------------------------------------
    std::string m_arrayLength;
    //----------------------------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief Return the singleton instance of the the class OsoReader
//----------------------------------------------------------------------------------------------------------------------------------------
OsoReader* getOsoReader();
//----------------------------------------------------------------------------------------------------------------------------------------
/// @brief An instance of the class OsoReader used as a singleton
//----------------------------------------------------------------------------------------------------------------------------------------
static OsoReader *osoReader;
//----------------------------------------------------------------------------------------------------------------------------------------
#endif
