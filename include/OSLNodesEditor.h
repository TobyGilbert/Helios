#ifndef OSLNODESEDITOR_H
#define OSLNODESEDITOR_H

//------------------------------------------------------------------------------------------------------------------------------------
/// @class OSLNodesEditor
/// @brief an extention to QNodesEditor which adds OSL to Optix customisations
/// @author Declan Russell
/// @date 20/03/2015
//------------------------------------------------------------------------------------------------------------------------------------

#include <QObject>
#include "OSLShaderBlock.h"
#include "qnodeseditor.h"
#include "qneport.h"

class OSLNodesEditor : public QNodesEditor
{
    Q_OBJECT
public:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //------------------------------------------------------------------------------------------------------------------------------------
    explicit OSLNodesEditor(QObject *parent = 0);
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief mutator to the path where our optix material is created
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void setMatDestination(std::string _dest){m_optixMatDest = _dest;}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for our material name
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void setMatName(std::string _name){m_materialName = _name;}
    //------------------------------------------------------------------------------------------------------------------------------------
signals:

public slots:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to create an optix material program from our OSL node graph.
    /// @brief The file will default be created in OptixMaterials/tempMat.cu unless specified otherwise
    //------------------------------------------------------------------------------------------------------------------------------------
    void createOptixMaterial();
    //------------------------------------------------------------------------------------------------------------------------------------
private:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief a recursive function to to evaluate our blocks to find there order
    /// @param _block - the block we want to evaluate
    /// @param _blockVector - the vector we wish to store our ordered blocks
    //------------------------------------------------------------------------------------------------------------------------------------
    void evaluateBlock(QNEBlock *_block, std::vector<QNEBlock*> &_blockVector);
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief iterates through our scenes children to the last block to be written in our material.
    /// @brief this will be the first node found with Ci as an output.
    //------------------------------------------------------------------------------------------------------------------------------------
    QNEBlock *getLastBlock();
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief takes in an QNEPort::type and returns the type in string form
    //------------------------------------------------------------------------------------------------------------------------------------
    QString portTypeToString(QNEPort::variableType _type);
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief the destination that we wish to create our optix material. Defualt is OptixMaterials/tempMat.cu
    //------------------------------------------------------------------------------------------------------------------------------------
    std::string m_optixMatDest;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief the name of our material, this will default to tempMaterial
    //------------------------------------------------------------------------------------------------------------------------------------
    std::string m_materialName;
    //------------------------------------------------------------------------------------------------------------------------------------


};

#endif // OSLNODESEDITOR_H
