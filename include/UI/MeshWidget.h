#ifndef MeshWidget_H
#define MeshWidget_H
//----------------------------------------------------------------------------------------------------------------------
/// @class MeshWidget
/// @date 29/01/14
/// @author Declan Russell
/// @brief This class is an extention of QWidget that adds all our mesh properties controls as default
//----------------------------------------------------------------------------------------------------------------------
#include <QDockWidget>
#include <QGridLayout>
#include <QLabel>
#include <QDoubleSpinBox>
#include <QSpacerItem>
#include <QPushButton>
#include <QFileDialog>
#include <QString>
#include <QListWidget>
#include <QListWidgetItem>
#include "Core/OptixModel.h"
#include <map>

#include "UI/AbstractMaterialWidget.h"



class MeshWidget : public QDockWidget
{
    Q_OBJECT
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the instance of our mesh widget
    //----------------------------------------------------------------------------------------------------------------------
    static MeshWidget *getInstance(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief destroys our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static void destroy();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief saves the objects in our scene to file
    /// @param ds - QDataStream of file;
    //----------------------------------------------------------------------------------------------------------------------
    void save(QDataStream &ds);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief loads scene from file
    /// @param ds - QDataStream of file
    //----------------------------------------------------------------------------------------------------------------------
    void load(QDataStream &ds);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of models in our scene
    //----------------------------------------------------------------------------------------------------------------------
    int getNumModels(){return m_modelList->count();}
    //----------------------------------------------------------------------------------------------------------------------

signals:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a signal called when something has changed to promt the update of our scene
    //----------------------------------------------------------------------------------------------------------------------
    void updateScene();
    //----------------------------------------------------------------------------------------------------------------------
public slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief clears all models in our scene
    //----------------------------------------------------------------------------------------------------------------------
    void clearScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our slot to notify if any tranform spinbox have been changed
    //----------------------------------------------------------------------------------------------------------------------
    void signalTransformChange(double _val = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief applys material to currently selected model
    //----------------------------------------------------------------------------------------------------------------------
    void applyOSLMaterial(optix::Material _mat, std::string _matName);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief applies material from library to mesh
    //----------------------------------------------------------------------------------------------------------------------
    void applyMatFromLib();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to import a model
    //----------------------------------------------------------------------------------------------------------------------
    void importModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot for if a item is selected from our list
    /// @param _item - item selected from list
    //----------------------------------------------------------------------------------------------------------------------
    void modelSelected(QListWidgetItem *_item);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to create instance of geometry selected
    //----------------------------------------------------------------------------------------------------------------------
    void createInstance();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to remove selected geometry
    //----------------------------------------------------------------------------------------------------------------------
    void removeSelected();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~MeshWidget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bool to define if we want to be able to update models translation
    //----------------------------------------------------------------------------------------------------------------------
    bool m_update;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor
    //----------------------------------------------------------------------------------------------------------------------
    explicit MeshWidget(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the instance of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static MeshWidget* m_instance;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief structure for our model properties
    //----------------------------------------------------------------------------------------------------------------------
    struct modelProp{
        float transX;
        float transY;
        float transZ;
        float rotX;
        float rotY;
        float rotZ;
        float scaleX;
        float scaleY;
        float scaleZ;
        bool isIntance;
        QString name;
        OptiXModel *meshHandle;
        std::string materialName;
        QString meshPath;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief map of our model properties
    //----------------------------------------------------------------------------------------------------------------------
    std::map<QString,modelProp*> m_modelProperties;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our current model properties
    //----------------------------------------------------------------------------------------------------------------------
    modelProp *m_curModelProp;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief List Widget to give UI to our models
    //----------------------------------------------------------------------------------------------------------------------
    QListWidget *m_modelList;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spacer for the widget
    //----------------------------------------------------------------------------------------------------------------------
    QSpacerItem* m_meshSpacer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for x rotation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshRotateXDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for y rotation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshRotateYDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for z rotation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshRotateZDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for x translation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshTranslateXDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for y translation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshTranslateYDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for z translation
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshTranslateZDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for x scale
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshScaleXDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for Y scale
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshScaleYDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our spinbox for z scale
    //----------------------------------------------------------------------------------------------------------------------
    QDoubleSpinBox* m_meshScaleZDSpinBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current mesh name
    //----------------------------------------------------------------------------------------------------------------------
    QString m_curMeshName;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // MeshWidget_H
