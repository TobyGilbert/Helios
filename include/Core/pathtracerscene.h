#ifndef PATHTRACERSCENE_H
#define PATHTRACERSCENE_H

/// @class PathTracerScene
/// @date 06/01/15
/// @author Declan Russell
/// @brief A class to manage our OptiX path tracer.
/// @brief This is a singleton class for easy access in other areas of the program

#ifdef DARWIN
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif

#include <optixu/optixpp_namespace.h>
#include <optixu/optixu_matrix_namespace.h>

#include <QImage>

#include "random.h"
#include "path_tracer.h"
#include "helpers.h"
#include "Core/OptixModel.h"
#include "Core/PathTraceCamera.h"

using namespace optix;

class PathTracerScene
{
protected:
    typedef optix::float3 float3;
    typedef optix::float4 float4;
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns an instance of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static PathTracerScene *getInstance();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~PathTracerScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our context
    //----------------------------------------------------------------------------------------------------------------------
    inline optix::Context &getContext(){return m_context;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialise our class
    //----------------------------------------------------------------------------------------------------------------------
    void init();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our trace function that launches our Optix context
    //----------------------------------------------------------------------------------------------------------------------
    void trace();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our output buffer
    //----------------------------------------------------------------------------------------------------------------------
    inline optix::Buffer getOutputBuffer(){return m_context["output_buffer"]->getBuffer();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the square root number of samples
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumSamples( float sns ){ m_sqrt_num_samples=sns; m_context["sqrt_num_samples"]->setUint(sns); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our total number of samples
    //----------------------------------------------------------------------------------------------------------------------
    inline int getNumSamples(){return m_sqrt_num_samples;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to set the width and height of our scene
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSize(unsigned int _width, unsigned int _height){m_width = _width; m_height = _height;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an accessor to the width of our scene
    //----------------------------------------------------------------------------------------------------------------------
    inline unsigned int getWidth(){return m_width;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an accessor to the height of our scene
    //----------------------------------------------------------------------------------------------------------------------
    inline unsigned int getHeight(){return m_height;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our scene
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _width, int _height);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for our device pixel ratio
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDevicePixelRatio(int _ratio = 1){m_devicePixelRatio = _ratio;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief signals if our camera has changed
    //----------------------------------------------------------------------------------------------------------------------
    inline void signalCameraChanged(){m_cameraChanged=true;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resets the frame count if the scene has changed
    //----------------------------------------------------------------------------------------------------------------------
    inline void signalSceneChanged(){m_frame = 0;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief updates our camera the instance of our camera
    //----------------------------------------------------------------------------------------------------------------------
    void updateCamera();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accesor to our scenes camera
    /// @return our camera
    //----------------------------------------------------------------------------------------------------------------------
    inline PathTraceCamera* getCamera(){return m_camera;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function to import a mesh to our scene
    /// @param _path - the path to our mesh
    /// @param _id - the id of our mesh
    //----------------------------------------------------------------------------------------------------------------------
    OptiXModel *importMesh(std::string _id, std::string _path);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates an instance of geometry in our scene
    /// @param _geomId - geometry Id to create an instance of
    /// @param _instanceName - desired name for instance created
    //----------------------------------------------------------------------------------------------------------------------
    OptiXModel *createInstance(std::string _geomId, std::string _instanceName);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief removes a geometry from our scene
    /// @param _id - id of geomtry to remove
    //----------------------------------------------------------------------------------------------------------------------
    void removeGeomtry(std::string _id);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transforms a model in our scene
    /// @param _id - the id of our model
    /// @param _trans - the transform we wish to apply to our model
    //----------------------------------------------------------------------------------------------------------------------
    void transformModel(std::string _id, glm::mat4 _trans);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the material of a model in our scene
    /// @param _id - the id of the model in our map
    /// @param _mat - the material that we wish to apply to the object
    //----------------------------------------------------------------------------------------------------------------------
    void setModelMaterial(std::string _id, Material _mat);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief render scene to image file
    //----------------------------------------------------------------------------------------------------------------------
    QImage saveImage();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets a new environment map
    //----------------------------------------------------------------------------------------------------------------------
    void setEnvironmentMap(std::string _environmentMap);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief removes our path tracer instance
    //----------------------------------------------------------------------------------------------------------------------
    inline void destroy(){delete m_instance;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Adds a light to the scene
    //----------------------------------------------------------------------------------------------------------------------
    void addLight();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Reevaluate the acceleration structure of the top model
    //----------------------------------------------------------------------------------------------------------------------
    void cleanTopAcceleration();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the max ray depth in our path tracer
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMaxRayDepth(int _depth){m_context["maxDepth"]->setUint(_depth); m_maxRayDepth = _depth;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accesor to the max ray depth of our path tracer
    //----------------------------------------------------------------------------------------------------------------------
    inline int getMaxRayDepth(){return m_maxRayDepth;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for our global transform
    /// @param _trans - desired global transform
    //----------------------------------------------------------------------------------------------------------------------
    void setGlobalTrans(glm::mat4 _trans);
    //----------------------------------------------------------------------------------------------------------------------
protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief An instance of the optix engine
    //----------------------------------------------------------------------------------------------------------------------
    optix::Context m_context;
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the max ray traversal depth of our path tracer
    //----------------------------------------------------------------------------------------------------------------------
    int m_maxRayDepth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor
    /// @brief these must be private so that we dont have copies of our singleton class created
    //----------------------------------------------------------------------------------------------------------------------
    PathTracerScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief remove any access to copy constructor as we dont want copies of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    PathTracerScene(PathTracerScene const&){}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief remove access to our assignment operator as we dont want copies of our signton class
    //----------------------------------------------------------------------------------------------------------------------
    PathTracerScene& operator=(PathTracerScene const&){return *this;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to our instance of our singleton class
    //----------------------------------------------------------------------------------------------------------------------
    static PathTracerScene* m_instance;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the top group of our scene
    //----------------------------------------------------------------------------------------------------------------------
    Group m_topGroup;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the global transform our our scene used for camera controls
    //----------------------------------------------------------------------------------------------------------------------
    Transform m_globalTrans;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief group with our global transform applied. Any child of this will be effected by our global transform node
    //----------------------------------------------------------------------------------------------------------------------
    Group m_globalTransGroup;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an array of all our mesh's
    //----------------------------------------------------------------------------------------------------------------------
    std::map<std::string,OptiXModel*> m_meshArray;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a bool to notify us if the camera has changed and we need to update engine camera paramiters
    //----------------------------------------------------------------------------------------------------------------------
    bool m_cameraChanged;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the camera of our scene
    //----------------------------------------------------------------------------------------------------------------------
    PathTraceCamera *m_camera;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our device pixel ratio default set to 1 but for mac this could be different
    //----------------------------------------------------------------------------------------------------------------------
    int m_devicePixelRatio;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our bounding box program
    /// @todo probably doesnt need to be a member but we'll get rid of that later
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_bounding_box;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our intersection program
    /// @todo probably doesn't need to be a member but we'll get rid of that later
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_intersection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our sphere bounding box program
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_sphereIntersection;
    //----------------------------------------------------------------------------------------------------------------------
    ///  @brief our sphere intersection program
    //----------------------------------------------------------------------------------------------------------------------
    optix::Program m_pgram_bounding_sphere;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the depth of our ray?
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_rr_begin_depth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the sqrt of the number of samples we want
    /// @brief sqrt's are expensive GPU so lets do it on the CPU
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_sqrt_num_samples;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current frame number
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_frame;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our sampling strategy, dont think that we need this
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_sampling_strategy;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the width of our scene
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the height of our scene
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our output buffer
    //----------------------------------------------------------------------------------------------------------------------
    optix::Buffer m_outputBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our environment map texture sample
    //----------------------------------------------------------------------------------------------------------------------
    optix::TextureSampler m_enviSampler;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // PATHTRACERSCENE_H
