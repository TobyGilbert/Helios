#ifndef MATERIALWIDGET_H
#define MATERIALWIDGET_H

/// @class AbstractMaterialWidget
/// @author Declan Russell
/// @date 05/03/15
/// @brief an abstract material widget that creates a simple setup
/// @brief so that we can quickly create a UI for an optix material.
/// @brief this class also deals with its own garbage collection for
/// @brief deleting any wigets added to it.

#include <QWidget>
#include <optixu/optixpp.h>
#include <QGridLayout>
#include <QGroupBox>
#include <QLayoutItem>
#include <QGraphicsView>
#include <QGraphicsScene>
#include "qnodeseditor.h"
#include "qneblock.h"


class AbstractMaterialWidget : public QWidget
{
    Q_OBJECT
public:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor
    //------------------------------------------------------------------------------------------------------------------------------------
    explicit AbstractMaterialWidget(QWidget *parent = 0);
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief our default destructor. Deals with our gabage collection
    //------------------------------------------------------------------------------------------------------------------------------------
    ~AbstractMaterialWidget();
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief set the tittle of our groupbox
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void setTitle(std::string _title){m_widgetGroupBox->setTitle(QString(_title.c_str()));}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief set the name of our material
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void setName(std::string _name){m_materialName = _name; setTitle(m_materialName);}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to the name of our material
    //------------------------------------------------------------------------------------------------------------------------------------
    inline std::string getName(){return m_materialName;}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief accessot to our material
    //------------------------------------------------------------------------------------------------------------------------------------
    inline optix::Material &getMaterial(){return m_material;}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief add a widget to our widget
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void addWidget(QWidget* _widget, int _row, int _column, int _rowSpan, int _columnSpan, Qt::Alignment _alignment = 0){m_groupBoxLayout->addWidget(_widget,_row,_column,_rowSpan,_columnSpan,_alignment); m_widgetObjects.push_back(_widget);}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief add an item to our widget
    //------------------------------------------------------------------------------------------------------------------------------------
    inline void addItem(QLayoutItem *_item, int _row, int _column, int _rowSpan, int _columnSpan, Qt::Alignment _alignment = 0){m_groupBoxLayout->addItem(_item,_row,_column,_rowSpan,_columnSpan,_alignment);}
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief adds a shader node to our user interface
    //------------------------------------------------------------------------------------------------------------------------------------
    void addShaderNode();
    //------------------------------------------------------------------------------------------------------------------------------------

signals:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief signal to export our OptiX material if updated
    //------------------------------------------------------------------------------------------------------------------------------------
    void updateMaterial(optix::Material _mat);
    //------------------------------------------------------------------------------------------------------------------------------------
public slots:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Create a slot to show our context menu if we right click anywhere on our widget
    //------------------------------------------------------------------------------------------------------------------------------------
    void showContextMenu(const QPoint& pos);
    //------------------------------------------------------------------------------------------------------------------------------------
private:
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief an array to store all our nodes
    //------------------------------------------------------------------------------------------------------------------------------------
    std::vector<QNEBlock*> m_nodes;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief QNodeEditor that manges loading and saving of our node graph
    //------------------------------------------------------------------------------------------------------------------------------------
    QNodesEditor *m_nodeEditor;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief QGraphics scene which will hold the node interface
    //------------------------------------------------------------------------------------------------------------------------------------
    QGraphicsScene *m_nodeInterfaceScene;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief QGraphicsView which will hold our material graph scene
    //------------------------------------------------------------------------------------------------------------------------------------
    QGraphicsView *m_graphicsView;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief the name of our material
    //------------------------------------------------------------------------------------------------------------------------------------
    std::string m_materialName;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief Our optix material
    //------------------------------------------------------------------------------------------------------------------------------------
    optix::Material m_material;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief the layout of our widget
    //------------------------------------------------------------------------------------------------------------------------------------
    QGridLayout *m_widgetLayout;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief the layout of our group box
    //------------------------------------------------------------------------------------------------------------------------------------
    QGridLayout *m_groupBoxLayout;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief a group box to hold all our widgets buttons
    //------------------------------------------------------------------------------------------------------------------------------------
    QGroupBox *m_widgetGroupBox;
    //------------------------------------------------------------------------------------------------------------------------------------
    /// @brief an array of all the objects in our scene for easy garbage collection
    //------------------------------------------------------------------------------------------------------------------------------------
    std::vector<QObject *> m_widgetObjects;
    //------------------------------------------------------------------------------------------------------------------------------------

};

#endif // MATERIALWIDGET_H
